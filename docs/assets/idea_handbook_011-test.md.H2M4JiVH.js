import{_ as s,a as i,p as t,e as a,t as n,a3 as d,o as r}from"./chunks/framework.8_iCw7Np.js";const o="/docs/assets/109_test_01.BQ8rnVfd.gif",l="/docs/assets/109_test_02_script.DGSMw7kP.gif",p="/docs/assets/109_test_03_env.CqEQe02p.gif",S=JSON.parse('{"title":"011 Api Test","description":"how to test api in ApiHug Api design Copilot.","frontmatter":{"title":"011 Api Test","description":"how to test api in ApiHug Api design Copilot."},"headers":[],"relativePath":"idea/handbook/011-test.md","filePath":"idea/handbook/011-test.md","lastUpdated":1714795370000}'),h={name:"idea/handbook/011-test.md"},c={id:"frontmatter-title",tabindex:"-1"},k=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),g=d('<ol><li>ApiHug Tool Window</li><li>Switch to <code>Test</code> tab</li><li>Find Api</li><li>Save Test</li><li>Switch to wider test editor panel</li><li>Test script</li></ol><p><img src="'+o+'" alt="Test"></p><h2 id="test-script" tabindex="-1">Test Script <a class="header-anchor" href="#test-script" aria-label="Permalink to &quot;Test Script&quot;">​</a></h2><ol><li>Script tab</li><li>Generate the code template</li><li>Open Edit Panel(or inline edit)</li><li><code>Prior</code> change request or <code>Post</code> change response</li></ol><p><img src="'+l+'" alt="Test script"></p><h2 id="test-environment" tabindex="-1">Test Environment <a class="header-anchor" href="#test-environment" aria-label="Permalink to &quot;Test Environment&quot;">​</a></h2><ol><li>Choice Environment</li><li>Select Server</li><li>Select Environment</li></ol><p><img src="'+p+`" alt="Test Env"></p><h2 id="api-script-management" tabindex="-1">API Script Management <a class="header-anchor" href="#api-script-management" aria-label="Permalink to &quot;API Script Management&quot;">​</a></h2><ol><li><code>groovy</code> Syntax</li><li>Editor autocomplete</li><li><code>Prior</code> request manipulate before send, <code>Post</code> response manipulae</li></ol><h2 id="embedded-context" tabindex="-1">Embedded Context <a class="header-anchor" href="#embedded-context" aria-label="Permalink to &quot;Embedded Context&quot;">​</a></h2><p><strong>Common</strong> Part:</p><table><thead><tr><th>Method</th><th>Description</th><th>Comment</th></tr></thead><tbody><tr><td><code>String getHeader(String key)</code></td><td>get header</td><td>both request/response</td></tr><tr><td><code>List&lt;String&gt; getHeaders(String key)</code></td><td>get header as list</td><td>both request/response</td></tr><tr><td><code>List&lt;String&gt; getHeaderKeys()</code></td><td>get header key list</td><td>both request/response</td></tr></tbody></table><h3 id="request" tabindex="-1">Request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;Request&quot;">​</a></h3><table><thead><tr><th>Method</th><th>Description</th><th>Comment</th></tr></thead><tbody><tr><td><code>String getUrl()</code></td><td>Get URL</td><td>-</td></tr><tr><td><code>void setUrl(String url)</code></td><td>Overwrite URL</td><td>-</td></tr><tr><td><code>String getParameter(String name)</code></td><td>Get Parameter</td><td>If list only first return</td></tr><tr><td><code>void setParameter(String name, String value)</code></td><td>Set Parameter</td><td>Overwrite exist</td></tr><tr><td><code>void setParameters(Map&lt;String, String&gt; parameters)</code></td><td>Set Parameter Map</td><td>-</td></tr><tr><td><code>void addParameter(String name, String value)</code></td><td>Add Parameter</td><td>-</td></tr><tr><td><code>void removeParameter(String name)</code></td><td>Delete Parameter</td><td>-</td></tr><tr><td><code>void setFormData(String name, String value)</code></td><td>Set Form Data</td><td>-</td></tr><tr><td><code>void setHeader(String name, String value)</code></td><td>Set header</td><td>-</td></tr><tr><td><code>void addHeader(String name, String value)</code></td><td>Add header</td><td>-</td></tr><tr><td><code>void removeHeader(String name)</code></td><td>Remove header</td><td>-</td></tr><tr><td><code>byte[] getRequestBody()</code></td><td>Get request body</td><td>-</td></tr><tr><td><code>void setRequestBody(String payload)</code></td><td>Set request body</td><td>String</td></tr><tr><td><code>void setRequestBody(byte[] payload)</code></td><td>Set request body</td><td>byte</td></tr><tr><td><code>void setRequestBody(InputStream input)</code></td><td>Set request body</td><td>Stream</td></tr><tr><td><code>Map&lt;String, List&lt;String&gt;&gt; getParameterMap()</code></td><td>Get all parameter</td><td>-</td></tr><tr><td><code>List&lt;String&gt; getParameterValues(String name)</code></td><td>Get all parameter name</td><td>-</td></tr><tr><td><code>void setCookie(String cookie)</code></td><td>Set cookie</td><td>-</td></tr></tbody></table><h3 id="response" tabindex="-1">Response <a class="header-anchor" href="#response" aria-label="Permalink to &quot;Response&quot;">​</a></h3><table><thead><tr><th>Method</th><th>Description</th><th>Comment</th></tr></thead><tbody><tr><td><code>String getResponseBody()</code></td><td>Get response body</td><td>String</td></tr><tr><td><code>int getCode()</code></td><td>Get http code</td><td>-</td></tr><tr><td><code>String getCookie(String name)</code></td><td>Get cookie by name</td><td>-</td></tr><tr><td><code>String getCookie()</code></td><td>Get cookie</td><td>Entire cookie as String</td></tr></tbody></table><h3 id="logger" tabindex="-1">Logger <a class="header-anchor" href="#logger" aria-label="Permalink to &quot;Logger&quot;">​</a></h3><p>Debug log to IDEA console:</p><table><thead><tr><th>Method</th><th>Description</th><th>Comment</th></tr></thead><tbody><tr><td><code>void clear()</code></td><td>clear</td><td>-</td></tr><tr><td><code>void warn(final String message)</code></td><td>warn</td><td>-</td></tr><tr><td><code>void info(final String message)</code></td><td>info</td><td>-</td></tr><tr><td><code>void debug(final String message)</code></td><td>debug</td><td>-</td></tr><tr><td><code>void error(final String message)</code></td><td>error</td><td>-</td></tr></tbody></table><h3 id="runtime-context" tabindex="-1">Runtime context <a class="header-anchor" href="#runtime-context" aria-label="Permalink to &quot;Runtime context&quot;">​</a></h3><p>It can be used to update the current runtime environment parameters or variables based on the returned information.</p><table><thead><tr><th>Method</th><th>Description</th><th>Comment</th></tr></thead><tbody><tr><td><code>void updateGlobalVariable(String name, Object value)</code></td><td>Overwrite global variable</td><td>-</td></tr><tr><td><code>void updateGlobalParameter(String name, Object value)</code></td><td>Overwrite global parameter</td><td>-</td></tr><tr><td><code>void updateEnvVariable(String name, Object value)</code></td><td>Overwrite current env variable</td><td>-</td></tr><tr><td><code>void updateEnvParameter(String name, Object value)</code></td><td>Overwrite current env parameter</td><td>-</td></tr></tbody></table><h2 id="sample-template" tabindex="-1">Sample Template <a class="header-anchor" href="#sample-template" aria-label="Permalink to &quot;Sample Template&quot;">​</a></h2><div class="warning custom-block"><p class="custom-block-title">WARNING</p><ol><li>The <code>dummy</code> object is meant to assist you during the design phase. It will be automatically adjusted at runtime, so please do not touch it.</li><li><code>// Place your logic here</code> indicates the starting point for your code.</li><li>It is necessary to perform a complete <code>gradle build</code> for the project. Otherwise, the context may not be accessible, and code suggestions may not work properly. This is a one-time task.</li><li>Groovy syntax is similar to Java and generally interchangeable. It is also more concise, and there is no need to use semicolons(<code>;</code>) at the end.</li><li>Use the context&#39;s <code>logger</code> to output information instead of using <code>System.out</code>.</li></ol></div><h3 id="prior-script" tabindex="-1">Prior Script <a class="header-anchor" href="#prior-script" aria-label="Permalink to &quot;Prior Script&quot;">​</a></h3><p>Context included:</p><ol><li><code>request</code>, original request</li><li><code>logger</code>, logger to track the output</li></ol><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hope.common.script.HTTPRequest</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hope.common.script.LoggerAdapter</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/************************************************************************</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 1. Do not touch code below, it will be injected at runtime</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 2. Fellow the groovy syntax, Java syntax almost can work</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ************************************************************************/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTPRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> HTTPRequest.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DUMMY</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LoggerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LoggerAdapter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DUMMY</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*************************************************************************/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Place your logic here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">headerKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> request</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getHeader(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (headerKey </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">warn(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;we has header value </span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$headerKey</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">} </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    logger</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">warn(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;we has no header value set&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//request.setHeader(&quot;key&quot;,&quot;value&quot;);</span></span></code></pre></div><h3 id="post-script" tabindex="-1">Post Script <a class="header-anchor" href="#post-script" aria-label="Permalink to &quot;Post Script&quot;">​</a></h3><p>Context included:</p><ol><li><code>response</code>, response object</li><li><code>logger</code>, logger to track output</li><li><code>runtime</code>, interface to update runtime environment</li></ol><div class="language-groovy vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">groovy</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hope.common.script.HTTPResponse</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hope.common.script.LoggerAdapter</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hope.common.script.RuntimeContext</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/************************************************************************</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 1. Do not touch code below, it will be injected at runtime</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> * 2. Fellow the groovy syntax, Java syntax almost can work</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> ************************************************************************/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">HTTPResponse</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> response </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> HTTPResponse.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DUMMY</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LoggerAdapter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> logger </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> LoggerAdapter.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DUMMY</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RuntimeContext</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> runtime </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> RuntimeContext.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">DUMMY</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">/*************************************************************************/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Place your logic here</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">response</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">getHeader(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="reference" tabindex="-1">Reference <a class="header-anchor" href="#reference" aria-label="Permalink to &quot;Reference&quot;">​</a></h2><ol><li><a href="https://space.bilibili.com/666522636" target="_blank" rel="noreferrer">ApiHug101-Bilibili</a></li><li><a href="https://youtube.com/@ApiHug?si=C1yw0poHA01zbmyj" target="_blank" rel="noreferrer">ApiHug101-Youtube</a></li></ol>`,35);function m(e,u,y,E,b,v){return r(),i("div",null,[t("h1",c,[a(n(e.$frontmatter.title)+" ",1),k]),g])}const D=s(h,[["render",m]]);export{S as __pageData,D as default};
