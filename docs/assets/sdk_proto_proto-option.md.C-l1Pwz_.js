import{_ as e,a as t,p as s,e as o,t as i,a3 as n,o as p}from"./chunks/framework.8_iCw7Np.js";const F=JSON.parse('{"title":"Protocol Buffers Option","description":"How ApiHug use protocol buffers option","frontmatter":{"title":"Protocol Buffers Option","description":"How ApiHug use protocol buffers option"},"headers":[],"relativePath":"sdk/proto/proto-option.md","filePath":"sdk/proto/proto-option.md","lastUpdated":null}'),l={name:"sdk/proto/proto-option.md"},r={id:"frontmatter-title",tabindex:"-1"},h=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1),c=n(`<p>This article will explain how ApiHug leverages the extension capabilities of Protocol Buffers using options and utilizes Protocol Buffers as the language for defining the OpenAPI Specification (OAS).</p><h2 id="protocol-buffers-option" tabindex="-1">Protocol Buffers Option <a class="header-anchor" href="#protocol-buffers-option" aria-label="Permalink to &quot;Protocol Buffers Option&quot;">​</a></h2><p><a href="https://protobuf.dev/reference/protobuf/proto3-spec/#option" target="_blank" rel="noreferrer">Option</a> Options can be used in proto files, messages, enums and services. An option can be a protobuf defined option or a custom option. For more information, see Options in the language guide.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">option</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;option&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optionName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &quot;=&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> constant</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;;&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optionName</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optionNamePart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;.&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> optionNamePart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> }</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">optionNamePart</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ident</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> &quot;(&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] fullIdent </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre></div><p>Example:</p><div class="language-protobuf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>option java_package = &quot;com.example.foo&quot;;</span></span></code></pre></div><p>protobuf options:</p><ul><li>google.protobuf.FileOptions</li><li>google.protobuf.ServiceOptions</li><li>google.protobuf.MethodOptions</li><li>google.protobuf.MessageOptions</li><li>google.protobuf.FieldOptions</li><li>google.protobuf.EnumOptions</li><li>google.protobuf.EnumValueOptions</li><li>...</li></ul><h2 id="extension-support-oas" tabindex="-1">Extension Support OAS <a class="header-anchor" href="#extension-support-oas" aria-label="Permalink to &quot;Extension Support OAS&quot;">​</a></h2><p>By utilizing Protobuf&#39;s options, we can add our own custom options and generate code to handle parameters in the proto file accordingly. This allows us to perform operations such as adding meta information for example validation for messages.</p><p>The extension of Protocol Buffers options enables support for <a href="https://github.com/OAI/OpenAPI-Specification" target="_blank" rel="noreferrer">The OpenAPI Specification</a> possible.</p><p>In fact, there have been pioneers who have adopted similar approaches. For example, the <a href="https://github.com/googleapis/googleapis/tree/master/google/api" target="_blank" rel="noreferrer">Google Open API Protos</a> project utilizes pure Proto methods to define internal APIs, while <a href="https://github.com/grpc-ecosystem/grpc-gateway" target="_blank" rel="noreferrer">gRPC-Gateway</a> takes it a step further by translating RESTful HTTP APIs into gRPC.</p><p>A real google API example:</p><div class="language-protobuf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>service AdMobApi {</span></span>
<span class="line"><span>  option (google.api.default_host) = &quot;admob.googleapis.com&quot;;</span></span>
<span class="line"><span>  option (google.api.oauth_scopes) =</span></span>
<span class="line"><span>      &quot;https://www.googleapis.com/auth/admob.report&quot;;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  // Gets information about the specified AdMob publisher account.</span></span>
<span class="line"><span>  rpc GetPublisherAccount(GetPublisherAccountRequest)</span></span>
<span class="line"><span>      returns (PublisherAccount) {</span></span>
<span class="line"><span>    option (google.api.http) = {</span></span>
<span class="line"><span>      get: &quot;/v1/{name=accounts/*}&quot;</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>    option (google.api.method_signature) = &quot;name&quot;;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>A real gRPC-Gateway example:</p><div class="language-protobuf vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">protobuf</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>service WrappersService {</span></span>
<span class="line"><span>  rpc Create(Wrappers) returns (Wrappers) {</span></span>
<span class="line"><span>    option (google.api.http) = {</span></span>
<span class="line"><span>      post: &quot;/v1/example/wrappers&quot;</span></span>
<span class="line"><span>      body: &quot;*&quot;</span></span>
<span class="line"><span>    };</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h2 id="refer" tabindex="-1">Refer <a class="header-anchor" href="#refer" aria-label="Permalink to &quot;Refer&quot;">​</a></h2><ol><li><a href="https://github.com/grpc-ecosystem/grpc-gateway" target="_blank" rel="noreferrer">gRPC-Gateway</a> is a plugin of protoc. It reads a gRPC service definition and generates a reverse-proxy server which translates a RESTful JSON API into gRPC.</li><li><a href="https://github.com/googleapis/googleapis/tree/master/google/api" target="_blank" rel="noreferrer">Google Open API Protos</a> public Google APIs that support both REST and gRPC protocols.</li><li><a href="https://github.com/OAI/OpenAPI-Specification" target="_blank" rel="noreferrer">The OpenAPI Specification</a></li></ol>`,18);function u(a,g,d,f,k,b){return p(),t("div",null,[s("h1",r,[o(i(a.$frontmatter.title)+" ",1),h]),c])}const y=e(l,[["render",u]]);export{F as __pageData,y as default};
