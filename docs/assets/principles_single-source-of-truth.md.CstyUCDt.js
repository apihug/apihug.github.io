import{_ as o,a as i,p as e,e as a,t as n,a3 as s,o as r}from"./chunks/framework.8_iCw7Np.js";const c="/docs/assets/pirates-code.CrChhu-b.webp",l="/docs/assets/git-op1.CnvqXuAs.webp",h="/docs/assets/git-op2.B3A6EDYb.webp",d="/docs/assets/api-syn-1.BwQdDkZE.webp",p="/docs/assets/api-syn-2.COVgpD4g.webp",u="/docs/assets/api-syn-3.BBVLm1vL.webp",A=JSON.parse('{"title":"Why SSOT is important","description":"Single source of truth, more efficient communication and collaboration","frontmatter":{"title":"Why SSOT is important","description":"Single source of truth, more efficient communication and collaboration"},"headers":[],"relativePath":"principles/single-source-of-truth.md","filePath":"principles/single-source-of-truth.md","lastUpdated":1714795370000}'),m={name:"principles/single-source-of-truth.md"},g={id:"frontmatter-title",tabindex:"-1"},f=e("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"‚Äã",-1),w=s('<blockquote><p>Single source of truth (SSOT) is used to describe the unique data that everyone in an organization relies on for reference.</p></blockquote><div class="tip custom-block"><p class="custom-block-title">TBC</p><p>Not finish yet üèóÔ∏è</p></div><h2 id="concept" tabindex="-1">Concept <a class="header-anchor" href="#concept" aria-label="Permalink to &quot;Concept&quot;">‚Äã</a></h2><p><code>SSOT</code>: Single Source Of Truth, as the name suggests.</p><p>Once upon a time, the computer world was controlled by something called a Mainframe, where code and programs were centralized. However, with the proliferation of various solutions and the distribution and decentralization of computer resources, the environment and architecture have become microservices, which brings benefits as well as challenges. The fragmentation of management and collaboration, while providing a high degree of autonomy to different working groups and different roles within the same group, also brings inevitable conflicts in change management. This is not out of malice but due to architectural design flaws that cannot adapt to the change management required in modern distributed systems. Fortunately, there is a set of methods, single source of truth (SSOT) + GitOps principles, that can effectively manage the changes in your organizational assets.</p><blockquote><p>Single source of truth (SSOT) is a concept used to ensure that everyone in an organization bases business decisions on the same data.</p></blockquote><h2 id="why" tabindex="-1">Why <a class="header-anchor" href="#why" aria-label="Permalink to &quot;Why&quot;">‚Äã</a></h2><p>Change management, the pursuit of <strong>fast, accurate</strong> delivery to all places, <strong>fast</strong>: all processes are as automated as possible; <strong>accurate</strong>: the need to exclude human intervention, formatted expression: <strong>code</strong>. Everything is code (Code), which is both the code in the sense of human-computer interaction and the principle (Law). Code and Law are two closely related concepts, such as the Pirate Code that everyone must follow in the &quot;Pirates of the Caribbean.&quot;</p><p><img src="'+c+'" alt="Pirates Code"></p><p>Applications (Application), networking (Networking), computing resources (Computing resources), storage (Storage), everything can be codified. Unified under code (Code) is easy to handle, which is equivalent to normalizing everything, and the rules of code time are unified. Code has its own verification rules: static or dynamic, and code has its own organization, storage, and distribution methods: Repository &amp; Artificat; Nexus Repository in the Java world, npm in the JavaScript world.</p><blockquote><p>Git repository is the sole source of truth</p></blockquote><p>Based on the Git construction process, it has evolved into GitOps. Most modern Git repository platforms have already integrated CI/CD interactions into their list of essential functions.</p><p><img src="'+l+'" alt="Git 01"></p><p>When all resources are codified, GitOps controls storage, versioning, synchronization, etc.</p><p><img src="'+h+'" alt="Git 02"></p><p>Under this principle, architects need to ensure that all artifacts (such as jar packages) have detailed descriptions, displays, and controls of the underlying environmental architecture; deployment scripts need: CI/CD process control; virtual environment configuration files; they should be as detailed and rigorous as the database&#39;s ERD, architectural UML, etc.</p><p>So, what does this have to do with the entire API lifecycle management? Here&#39;s an example:</p><h2 id="an-example" tabindex="-1">An Example <a class="header-anchor" href="#an-example" aria-label="Permalink to &quot;An Example&quot;">‚Äã</a></h2><p>API implementation + API documentation is as follows. Of course, the API documentation here is independently written, and now it can be generated from the code in reverse. However, most are still disconnected. If you are directly using some API design tools, such as ApiFox, Postman, Stoplight, etc., the two parallel worlds still exist!</p><p><img src="'+d+'" alt="api syn1"></p><p>The next day, a new interface &#39;/elephants&#39; was added to the requirements, and something bad happened, the API documentation was not synchronized! Now, after reverse generation of the document, it feeds back to the API sharing platform, whether manually or semi-automatically, but this is not a perfect solution. The defect is that although the source code plays the role of SSOT, it does not take full responsibility; the SSOT role needs:</p><ol><li>A way for all parties to access</li><li>To notify interested parties when the truth changes</li></ol><p>Obviously, the source code does not have the above capabilities! So, what should be used as the only trusted source SSOT? At this time, an independent Specification is needed, and this Specification is preferred:</p><blockquote><p>All work emanates from an ever-evolving but controlled specification. This includes coding, documenting, and enhancing software</p></blockquote><p><strong>Specification First</strong> is a software development method whose core concept is that all work originates from a continuously evolving but controlled specification. This includes aspects such as coding, document writing, and software enhancement. This is the code, it&#39;s the law!</p><p>&quot;Specification First&quot; has many in the API world: OpenAPI, gRPC, AsyncAPI, or GraphQL, etc.</p><p>Specification serves as a neutral SSOT to control the generation of documentation and code. Different roles in software development use the API Specification as a collaborative medium, as follows:</p><p><img src="'+p+'" alt="api syn2"></p><p>There is also a defect: How to prevent API developers from entering the source code and changing the API without the knowledge of the documentation personnel, causing the content to become out of sync again? This is where automation comes into play. As shown in the figure below, the <code>OnSpecChange</code> event displayed at the bottom indicates that when the API specification is changed, it will trigger an <code>OnSpecChange</code> event in some way, and interested parties can respond accordingly.</p><p>Current Git repositories generally provide a Web Hook mechanism to obtain the relevant triggers for the next action.</p><p><img src="'+u+'" alt="api syn3"></p><p>This scheme still has significant limitations. Triggering the next action, automatically updating the code and documentation, especially the code update, still cannot be smoothly achieved under the limitations of language and architecture, and the risk is relatively high.</p><p>SSOT is easy to choose, but the path to synchronization is still long. How to truly eliminate the differences in understanding of changes among different roles and links, and maintain strong consistency, is a topic that is always worth exploring.</p><p><a href="https://www.apihug.com" target="_blank" rel="noreferrer">Apihug</a> not only uses <code>git</code> as the first management tool for the single source of truth of the <code>API</code> protocol standard, relying on major git service providers (Github, GitLab, Gitee, etc.) to unify the management of <code>API</code> protocols and version iterations; at the same time, in the distribution and sharing of <code>API</code> protocols, it uses existing distribution tools; modularization, reuse of <code>API</code> components, to avoid repetitive work, significantly improving development efficiency.</p><h2 id="refer" tabindex="-1">Refer <a class="header-anchor" href="#refer" aria-label="Permalink to &quot;Refer&quot;">‚Äã</a></h2><ul><li><a href="https://www.redhat.com/architect/single-source-truth-architecture" target="_blank" rel="noreferrer">Implementing single source of truth in an enterprise architecture</a></li><li><a href="https://www.talend.com/resources/single-source-truth/" target="_blank" rel="noreferrer">Single Source of Truth</a></li><li><a href="https://swagger.io/tools/swaggerhub/" target="_blank" rel="noreferrer">swaggerhub -The Single Source of Truth for API Development</a></li><li><a href="https://hackolade.com/metadata-as-code.html" target="_blank" rel="noreferrer">Metadata-as-Code SSOT</a></li></ul>',36);function b(t,y,v,S,_,k){return r(),i("div",null,[e("h1",g,[a(n(t.$frontmatter.title)+" ",1),f]),w])}const P=o(m,[["render",b]]);export{A as __pageData,P as default};
